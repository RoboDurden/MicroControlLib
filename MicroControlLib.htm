<!--  
	https://github.com/RoboDurden/MicroControlLib
	2019/06/21 MicroControlLib v0.2 by Robo Durden 
	copyright: GNU General Public License v3.0 = GNU GPLv3
	
	bug fix 2019/06/21:

fertig:
		while(j2<j)
...	
			case "-":
				if (j2>i)	// we already parsed a number
					if (cType)	// we already parsed a param
						break fertig;
					else
						return {"t":0,"f":0,"i":i,"j":j2,"fRet":s.substr(i,j2-i)};
	
-->
<html>
<body>
<div id=demo></div>
<script>

var aValue; 	// the array of values
var aGlobal;		// the array of global variables
var aSystem;		// the array of system variables, 
//				some readonly like time, some writeonly like output bits

function GetTypeArray(sType)
{
	switch(sType)
	{
	case "v":	return aValue;
	case "g":	return aGlobal;
	case "s":	return aSystem;
	}
	return 0;	
}
	
function Calc(s)
{
	var iLen = s.length;
	var o1 = NextNum(s,0,iLen);
	while(1)
	{
		var sOp = s.charAt(o1.j);
		var o2 = NextNum(s,o1.j+1,iLen);
		var f = 0;
		switch(sOp)
		{
		case ">":	f = (o1.fRet > o2.fRet) ? 1 : 0;	break;
		case "<":	f = (o1.fRet < o2.fRet) ? 1 : 0;	break;
		case "=":	f = (o1.fRet == o2.fRet) ? 1 : 0;	break;
		case "+":	f = o1.fRet + o2.fRet;	break;
		case "-":	f = o1.fRet + o2.fRet;	break;
		case "*":	f = o1.fRet * o2.fRet;	break;
		case "/":	f = o1.fRet / o2.fRet;	break;
		case "|":	f = o1.fRet | o2.fRet;	break;
		case "&":	f = o1.fRet & o2.fRet;	break;
		case "~":	
			if (!o2.t)	// syntax error: can not set o1.f to a constant variable
				return 0;
			var a = GetTypeArray(o2.t);
			a[o2.f] = f = o1.fRet;
			break;
		default:	// unkown operator
			return 0;
		}
		if (o2.j >= iLen)
			break;
		o1 = {"t":0,"i":o2.i,"j":o2.j,"fRet":f};
	}
	return f;
}

function NextNum(s,i,j)
{
	//return 0;
	while(i<j)
	{
		var c = s.charAt(i++);
		if (c == "(")
		{
			var iOpen = 1;
			var j2=i;
			while(j2<j)
			{
				var c = s.charAt(j2++);
				if (c == "(")
				{
					iOpen++;
				}	
				if (c == ")")
				{
					iOpen--;
					break;
				}	
			}
			if (iOpen>0)	
				return 0;
			return {"t":0,"f":0,"i":i,"j":j2,"fRet":Calc(s.substr(i,j2-i-1))};
		}
		var cType = 0;	// expecting this to be a constant number
		var j2=--i;
fertig:
		while(j2<j)
		{
			switch(c)
			{
			case "+":
			case "-":
				if (j2>i)	// we already parsed a number
					if (cType)	// we already parsed a param
						break fertig;
					else
						return {"t":0,"f":0,"i":i,"j":j2,"fRet":s.substr(i,j2-i)};
			case ".":
				if (cType)	// syntax error
					return 0;
			case "0":
			case "1":
			case "2":
			case "3":
			case "4":
			case "5":
			case "6":
			case "7":
			case "8":
			case "9":
				break;
			default: 
				if (cType)
				{
					var iPos = s.substr(i,j2-i);
					var a = GetTypeArray(cType);
					var f=a[iPos];
					return {"t":cType,"f":iPos,"i":i,"j":j2,"fRet":f};
				}
				if (j2>i)	// we already parsed a number
					return {"t":0,"f":0,"i":i,"j":j2,"fRet":1*s.substr(i,j2-i)};
				cType = c;	// seems to be something linke "v1"
				i++;
			}
			c = s.charAt(++j2);
		}
		if (cType)
		{
			var iPos = s.substr(i,j2-i);
			var a = GetTypeArray(cType);
			var f=a[iPos];
			return {"t":cType,"f":iPos,"i":i,"j":j2,"fRet":f};			
		}
		return {"t":cType,"f":0,"i":i,"j":j2,"fRet":1*s.substr(i,j2-i)};
	}
}	

aName = ["data","P1","P2","P3","E1","E2","E3","dP1","dP2","dP3","dE1","dE2","dE3"];
//aValue = [0,16.7,64.4,95.5,18.3,43.7,95.5,99,6.5,43.6,4];
aValue = [100,4.6,4.6,4.6,102857.5,102902.2,103541.9,1.6,1.6,1.5,24.8,24.6,2.5];
aGlobal = [0,0,0,0,0,0,0,0,0];
aSystem = [1556474970,0];

String.prototype.replaceAll = function(search, replacement) {
    var target = this;
    return target.replace(new RegExp(search, 'g'), replacement);
};

function Demo(sFormula,rForm)
{
	if (rForm)
	{
		aName = rForm.n.value.split(",");
		aValue = rForm.v.value.split(",");
		for (var i in aValue)	aValue[i] = 1*aValue[i];
	}

	var sCalc = sFormula.replaceAll(" ","");
	sCalc = sCalc.replaceAll("=:","~").replaceAll("\n",";");
	for(var i=aName.length-1; i>=0; i--)
		sCalc = sCalc.replaceAll(aName[i],"v"+i);

	var aCalc = sCalc.split(";");
	
	var s = "<form onSubmit='return Demo(this.s.value,this)'>" 
		+ "n? = <input name='n' style='width:80%' value='"+aName.join(",") + "'/> (names)<br>"
		+"v? = <input name='v' style='width:80%' value='"+aValue.join(",") + "'/> (sensor data)<br>"
		+"g? = "+aGlobal.join(" , ") + " (global variables)<br>"
		+"s? = "+aSystem.join(" , ") + " (system variable like time or outupt-pins)<br><hr>";
	
	for (var i in aCalc)
	{
		sCalc = aCalc[i];
		var sRes = Calc(sCalc);
		s += i + ": calculate " + sCalc + " &rarr; " + sRes + "<br>"
			+"&nbsp;&nbsp;g? = "+aGlobal.join(" , ") + " (global variables)<br>"
			+"&nbsp;&nbsp;s? = "+aSystem.join(" , ") + " (system variables)<hr>";
	}
		
	s += "<br>next: <textarea id=s name=s style='width:70%' rows=3 >"+sFormula+"</textarea><input type=submit value='calculate'></form><br>";
	var r = document.getElementById("demo");
	if (r)
	{
		r.innerHTML = s;
		document.getElementById("s").focus();		
	}
		
	return false;
}

Demo("dE1+dE2+dE3/3=:g0\n(dE1/g0<0.5) | (dE2/g0<0.5) | (dE3/g0<0.5) & (g0>10) =:s1");
//Demo("(v2>46.3)+(v10>3.0)=2=:s1");

</script>
</body>
</html>